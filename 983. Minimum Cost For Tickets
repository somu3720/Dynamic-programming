class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        
        int[] dp = new int[400];
        
        Arrays.fill(dp, -1);
        int n = days.length;
        
        return helper(0, days, costs, dp);
    }
    
    public int helper(int currDay, int[] days, int[] costs, int[] dp)
    {   
        if(currDay > days[days.length - 1]) return dp[currDay] = 0;
        
        if(dp[currDay] != -1) return dp[currDay];
        
        int ans = Integer.MAX_VALUE;
        
        if(willITravelToday(currDay, days))
        {
            

            
            int daily = helper(currDay+1, days, costs, dp) + costs[0];
            
            int weekly = helper(currDay+7, days, costs, dp) + costs[1];
            
            int monthly = helper(currDay+30, days, costs, dp) + costs[2];
            
            ans = Math.min(daily, Math.min(weekly, monthly));
        }
        
        else
        {
            return dp[currDay] = helper(currDay+1, days, costs, dp);
        }
            
        
        
        return dp[currDay] = ans;
    }
    
    public boolean willITravelToday(int currDay, int[] days)
    {
        for(int i = 0; i < days.length; i++)
            if(currDay == days[i]) return true;
        
        return false;
    }
}

//https://www.youtube.com/watch?v=YNe1fsHgEOI
