class Solution {
    public List<Integer> diffWaysToCompute(String expression) {
        
        List<Integer> res  = new ArrayList<>();
        int n = expression.length();
        
        for(int i = 0; i < n; i++)
        {
            if(expression.charAt(i) == '-' || expression.charAt(i) == '*' || expression.charAt(i) == '+')
            {
                String part1 = expression.substring(0,i);
                String part2 = expression.substring(i+1);
                
                List<Integer> part1res = diffWaysToCompute(part1);
                List<Integer> part2res = diffWaysToCompute(part2);
                
                for(int p1 : part1res)
                {
                    for(int p2 : part2res)
                    {
                        int c = 0;
                        switch(expression.charAt(i))
                        {
                            case '+' :  c = p1 + p2;
                                break;
                            
                            case '*' :  c = p1 * p2;
                                break;
                            
                            case '-' :  c = p1 - p2;
                                break;

    
                        }
                        
                        res.add(c);
                    }
                }
            }
        }
        
        if (res.size() == 0) {
            res.add(Integer.valueOf(expression));
        }
        return res;
        
    }
}

//https://leetcode.com/problems/different-ways-to-add-parentheses/discuss/66328/A-recursive-Java-solution-(284-ms)
