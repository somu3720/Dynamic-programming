class Solution {
    public boolean stoneGame(int[] piles) {
        
        int n = piles.length;
        int dp[][] = new int[n][n];
        
        for(int g = 0; g < n; g++)
        {
            for(int i = 0, j = g; j < n; i++, j++)
            {
                if(g == 0)
                    dp[i][j] = piles[i];
                
                else if(g == 1)
                    dp[i][j] = Math.max(piles[i], piles[j]);
                
                else 
                {
                    // i : i + 1 to j
                    // opponent either  i+1 : i + 2 to j
                    // or j : i+1 to j-1;
                    
                    int val1 = piles[i] + Math.min(dp[i+2][j], dp[i+1][j-1]);
                    
                    // j : i to j - 1
                    // opponent either  i : i + 1 to j-1
                    // or j-1 : i to j-2;
                    
                    int val2 = piles[j] + Math.min(dp[i+1][j-1], dp[i][j-2]);
                    
                    int val = Math.max(val1, val2);
                    
                    dp[i][j] = val;
                    
                
                    
                }
                
            }
        }
        
        return dp[0][n-1] > 0;
        
    }
}

//https://www.youtube.com/watch?v=ww4V7vRIzSk&t=8s
