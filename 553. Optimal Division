public class Solution {
    public String optimalDivision(int[] nums) {
        
        if (nums.length == 1)
            return nums[0] + "";
        
        if (nums.length == 2)
            return nums[0] + "/" + nums[1];
        
        StringBuilder res = new StringBuilder(nums[0] + "/(" + nums[1]);
        
        for (int i = 2; i < nums.length; i++) {
            res.append("/" + nums[i]);
        }
        
        res.append(")");
        return res.toString();
    }
}


/*
Using some simple math we can find the easy solution of this problem. Consider the input in the form of [a,b,c,d], now we have to set priority of operations to maximize a/b/c/d. We know that to maximize fraction p/qp/q, qq(denominator) should be minimized. So, to maximize a/b/c/da/b/c/d we have to first minimize b/c/d. Now our objective turns to minimize the expression b/c/d.

There are two possible combinations of this expression, b/(c/d) and (b/c)/d.

b/(c/d)        (b/c)/d = b/c/d
(b*d)/c        b/(d*c)
d/c            1/(d*c)
Obviously, d/c > 1/(d*c)d/c>1/(dâˆ—c) for d>1d>1.

You can see that second combination will always be less than first one for numbers greater than 11. So, the answer will be a/(b/c/d). Similarly for expression like a/b/c/d/e/f... answer will be a/(b/c/d/e/f...).

*/
