class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int minSum = Integer.MAX_VALUE;
        
        int dp[][] = new int[matrix.length][matrix[0].length];
        
        for(int i = 0; i < matrix.length; i++)
        {
            minSum = Math.min(minSum, helper(matrix, 0, i, dp));
        }
        
        return minSum;
    }
    
    public int helper(int matrix[][], int row, int col, int [][] dp)
    {
        // check if we are out of the left or right boundary of the matrix
        if(col < 0 || col == matrix.length)
            return Integer.MAX_VALUE;
        
       //check if we have reached the last row
        if(row == matrix.length - 1)
            return matrix[row][col];
        
    //check if the results are calculated before
        if(dp[row][col] != 0)
        {
            return dp[row][col];
        }
        
        
        // calculate the minimum falling path sum starting from each possible next step
        
        int left = helper(matrix,row + 1, col - 1,dp);
        int middle = helper(matrix, row + 1, col,dp);
        int right = helper(matrix, row + 1, col + 1,dp);
        
        dp[row][col] = Math.min(left, Math.min(right, middle)) + matrix[row][col];
        
        return dp[row][col];
    }
}
