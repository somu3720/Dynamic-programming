class Solution {
    int dp[];
    
    Solution()
    {
        dp = new int[38];  // 0 <= n < = 37
       
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 1;
        for(int i = 3; i < dp.length; i++) dp[i] = -1;
        

        
    }
    
    public int tribonacci(int n) {
        
        if(dp[n] != -1)
            return dp[n];
        
        else
        {
            dp[n] = tribonacci(n-3) + tribonacci(n-2) + tribonacci(n-1);
            return dp[n];
        }
        
        
    }
}

//https://leetcode.com/problems/n-th-tribonacci-number/discuss/910272/Java-Readable-100-time-O(n)-time-O(1)-space-with-explanation.
