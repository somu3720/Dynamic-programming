class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        
        int n = arr.length;
        
        // value_index map
        Map<Integer, Integer> map = new HashMap();
        
        for(int i = 0; i < n; i++)
        {
            map.put(arr[i], i);
        }
        
        Map<Integer, Integer> longest = new HashMap();
        
        int ans = 0;
        
        for(int k = 0; k < n; k++)
        {
            for(int j = 0; j < k; j++)
            {
                int i = map.getOrDefault(arr[k] - arr[j], -1);
                
                if( i >= 0 && i < j)
                {
                    int cand = longest.getOrDefault(i*n+j, 2)+1;
                    longest.put(j*n + k, cand);
                    ans = Math.max(ans, cand);
                }
            }
        }
        
        return ans >= 3 ? ans : 0;
    }
}

//https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/solution/
