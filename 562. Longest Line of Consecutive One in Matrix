class Solution {
    public int longestLine(int[][] mat) {
        
        if(mat.length == 0) return 0;
        
        int maxCount = 0;
        
        //horizontal
        
        for(int i = 0; i < mat.length; i++)
        {
            int tempCount = 0;
            
            for(int j = 0; j < mat[0].length; j++)
            {
                
                if(mat[i][j] == 1)
                {
                    tempCount++;
                    maxCount = Math.max(maxCount,tempCount);
                }
                else
                    tempCount = 0;
            }
        }
        
        //vertical
        
        for(int j = 0; j < mat[0].length; j++)
        {
            int tempCount = 0;
            
            for(int i = 0; i < mat.length; i++)
            {
                
                if(mat[i][j] == 1)
                {
                    tempCount++;
                    maxCount = Math.max(maxCount,tempCount);
                }
                else
                    tempCount = 0;
            }
        }
        
        //upper diagonal
        
        for(int i = 0; i < mat[0].length || i < mat.length; i++)
        {
            int tempCount = 0;
            
            for(int x = 0, y = i; x < mat.length && y < mat[0].length; x++, y++)
            {
                
                if(mat[x][y] == 1)
                {
                    tempCount++;
                    maxCount = Math.max(maxCount,tempCount);
                }
                else
                    tempCount = 0;
            }
        }
        
        //lower diagonal
        
        for(int i = 0; i < mat[0].length || i < mat.length; i++)
        {
            int tempCount = 0;
            
            for(int x = i, y = 0; x < mat.length && y < mat[0].length; x++, y++)
            {
                
                if(mat[x][y] == 1)
                {
                    tempCount++;
                    maxCount = Math.max(maxCount,tempCount);
                }
                else
                    tempCount = 0;
            }
        }
        
        
                //upper anti-diagonal
        
        for(int i = 0; i < mat[0].length || i < mat.length; i++)
        {
            int tempCount = 0;
            
            for(int x = 0, y = mat[0].length - i - 1; x < mat.length && y >= 0; x++, y--)
            {
                
                if(mat[x][y] == 1)
                {
                    tempCount++;
                    maxCount = Math.max(maxCount,tempCount);
                }
                else
                    tempCount = 0;
            }
        }
        
                     //lower anti-diagonal
        
        for(int i = 0; i < mat[0].length || i < mat.length; i++)
        {
            int tempCount = 0;
            
            for(int x = i, y = mat[0].length - 1; x < mat.length && y >= 0; x++, y--)
            {
                
                if(mat[x][y] == 1)
                {
                    tempCount++;
                    maxCount = Math.max(maxCount,tempCount);
                }
                else
                    tempCount = 0;
            }
        }
        
        return maxCount;
    }
}

//https://leetcode.com/problems/longest-line-of-consecutive-one-in-matrix/solution/
