class Solution {
    public int maxProfit(int[] prices) {
        
        int n = prices.length;
        int maxProfitLeft = 0;
        int leastLeft = prices[0];
        int []dpLeft = new int[n];
        
        for(int i = 1; i < n; i++)
        {
            if(prices[i] < leastLeft)
            {
                leastLeft = prices[i];
            }
            
          maxProfitLeft = prices[i] - leastLeft;
            
            if(maxProfitLeft > dpLeft[i-1])
            {
                dpLeft[i] = maxProfitLeft;
            }
            
            else
            {
                dpLeft[i] = dpLeft[i - 1];
            }
      
        }
        
        int maxProfitRight = 0;
        int maxRight = prices[n-1];
        int dpRight[] = new int[n];
        
        for(int i = n - 2; i >= 0; i--)
        {
            if(prices[i] > maxRight)
            {
                maxRight = prices[i];
            }
            
            maxProfitRight = maxRight - prices[i];
            
            if(maxProfitRight > dpRight[i + 1])
            {
                dpRight[i] = maxProfitRight;
            }
            
            else
            {
                dpRight[i] = dpRight[i + 1];
            }
        }
        
        int OverallProfit = 0;
        
        for(int i = 0; i < n; i++)
        {
            if(dpLeft[i] + dpRight[i] > OverallProfit)
            {
                OverallProfit = dpLeft[i] + dpRight[i];
            }
        }
        
        return OverallProfit;
    }
}

//https://www.youtube.com/watch?v=wuzTpONbd-0
